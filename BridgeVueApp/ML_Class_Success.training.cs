// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using System.Data.SqlClient;


namespace BridgeVueApp
{
    public partial class ML_Class_Success
    {
        public const string RetrainConnectionString = @"Data Source=localhost;Initial Catalog=BridgeVue;Integrated Security=True;Trust Server Certificate=True";
        public const string RetrainCommandString = @"SELECT CAST([Grade] as REAL), CAST([Age] as REAL), CAST([Gender] as NVARCHAR(MAX)), CAST([Ethnicity] as NVARCHAR(MAX)), [SpecialEd], [IEP], CAST([EntryReason] as NVARCHAR(MAX)), CAST([PriorIncidents] as REAL), CAST([OfficeReferrals] as REAL), CAST([Suspensions] as REAL), CAST([Expulsions] as REAL), CAST([EntryAcademicLevel] as NVARCHAR(MAX)), CAST([EntrySocialSkillsLevel] as NVARCHAR(MAX)), CAST([AvgVerbalAggression] as REAL), CAST([AvgPhysicalAggression] as REAL), CAST([AvgAcademicEngagement] as REAL), CAST([RedZonePct] as REAL), CAST([ExitReason] as NVARCHAR(MAX)), CAST([LengthOfStay] as REAL) FROM [dbo].[vStudentMLData]";

        /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="connectionString">Connection string for databases on-premises or in the cloud.</param>
        /// <param name="commandText">Command string for selecting training data.</param>
        public static void Train(string outputModelPath, string connectionString = RetrainConnectionString, string commandText = RetrainCommandString)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromDatabase(mlContext, connectionString, commandText);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a database source.For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="connectionString">Connection string for databases on-premises or in the cloud.</param>
        /// <param name="commandText">Command string for selecting training data.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromDatabase(MLContext mlContext, string connectionString, string commandText)
        {
            DatabaseLoader loader = mlContext.Data.CreateDatabaseLoader<ModelInput>();
            DatabaseSource dbSource = new DatabaseSource(SqlClientFactory.Instance, connectionString, commandText);

            return loader.Load(dbSource);
        }

        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"Gender", @"Gender"),new InputOutputColumnPair(@"Ethnicity", @"Ethnicity"),new InputOutputColumnPair(@"SpecialEd", @"SpecialEd"),new InputOutputColumnPair(@"IEP", @"IEP"),new InputOutputColumnPair(@"EntryAcademicLevel", @"EntryAcademicLevel"),new InputOutputColumnPair(@"EntrySocialSkillsLevel", @"EntrySocialSkillsLevel")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Grade", @"Grade"),new InputOutputColumnPair(@"Age", @"Age"),new InputOutputColumnPair(@"PriorIncidents", @"PriorIncidents"),new InputOutputColumnPair(@"OfficeReferrals", @"OfficeReferrals"),new InputOutputColumnPair(@"Suspensions", @"Suspensions"),new InputOutputColumnPair(@"Expulsions", @"Expulsions"),new InputOutputColumnPair(@"AvgVerbalAggression", @"AvgVerbalAggression"),new InputOutputColumnPair(@"AvgPhysicalAggression", @"AvgPhysicalAggression"),new InputOutputColumnPair(@"AvgAcademicEngagement", @"AvgAcademicEngagement"),new InputOutputColumnPair(@"RedZonePct", @"RedZonePct"),new InputOutputColumnPair(@"LengthOfStay", @"LengthOfStay")}))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"EntryReason",outputColumnName:@"EntryReason"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Gender",@"Ethnicity",@"SpecialEd",@"IEP",@"EntryAcademicLevel",@"EntrySocialSkillsLevel",@"Grade",@"Age",@"PriorIncidents",@"OfficeReferrals",@"Suspensions",@"Expulsions",@"AvgVerbalAggression",@"AvgPhysicalAggression",@"AvgAcademicEngagement",@"RedZonePct",@"LengthOfStay",@"EntryReason"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"ExitReason",inputColumnName:@"ExitReason",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator: mlContext.BinaryClassification.Trainers.LbfgsLogisticRegression(new LbfgsLogisticRegressionBinaryTrainer.Options(){L1Regularization=1F,L2Regularization=1F,LabelColumnName=@"ExitReason",FeatureColumnName=@"Features"}), labelColumnName:@"ExitReason"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
