// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;


namespace BridgeVueApp.MachineLearning
{
    public partial class ML_Class_Success
    {
        public const string RetrainConnectionString = @"Data Source=localhost;Initial Catalog=BridgeVue;Integrated Security=True;Trust Server Certificate=True";
        public const string RetrainCommandString = @"SELECT CAST([Grade] as REAL), CAST([Age] as REAL), CAST([GenderNumeric] as REAL), CAST([EthnicityNumeric] as REAL), [SpecialEd], [IEP], CAST([EntryReasonNumeric] as REAL), CAST([PriorIncidents] as REAL), CAST([OfficeReferrals] as REAL), CAST([Suspensions] as REAL), CAST([Expulsions] as REAL), CAST([EntryAcademicLevelNumeric] as REAL), [CheckInOut], [StructuredRecess], [StructuredBreaks], CAST([SmallGroups] as REAL), CAST([SocialWorkerVisits] as REAL), CAST([PsychologistVisits] as REAL), CAST([EntrySocialSkillsLevelNumeric] as REAL), CAST([RiskScore] as REAL), CAST([StudentStressLevelNormalized] as REAL), CAST([FamilySupportNormalized] as REAL), CAST([AcademicAbilityNormalized] as REAL), CAST([EmotionalRegulationNormalized] as REAL), CAST([AvgVerbalAggression] as REAL), CAST([AvgPhysicalAggression] as REAL), CAST([AvgAcademicEngagement] as REAL), CAST([AvgSocialInteractions] as REAL), CAST([AvgEmotionalRegulation] as REAL), CAST([AvgAggressionRisk] as REAL), CAST([AvgEngagementLevel] as REAL), CAST([RedZonePct] as REAL), CAST([YellowZonePct] as REAL), CAST([BlueZonePct] as REAL), CAST([GreenZonePct] as REAL), CAST([BehaviorDays] as REAL), CAST([ExitReasonNumeric] as REAL) FROM [dbo].[vStudentMLData]";

        /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="connectionString">Connection string for databases on-premises or in the cloud.</param>
        /// <param name="commandText">Command string for selecting training data.</param>
        public static void Train(string outputModelPath, string connectionString = RetrainConnectionString, string commandText = RetrainCommandString)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromDatabase(mlContext, connectionString, commandText);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a database source.For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="connectionString">Connection string for databases on-premises or in the cloud.</param>
        /// <param name="commandText">Command string for selecting training data.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromDatabase(MLContext mlContext, string connectionString, string commandText)
        {
            DatabaseLoader loader = mlContext.Data.CreateDatabaseLoader<ModelInput>();
            var dbSource = new DatabaseSource(Microsoft.Data.SqlClient.SqlClientFactory.Instance, connectionString, commandText);

            return loader.Load(dbSource);
        }

        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"SpecialEd", @"SpecialEd"),new InputOutputColumnPair(@"IEP", @"IEP"),new InputOutputColumnPair(@"CheckInOut", @"CheckInOut"),new InputOutputColumnPair(@"StructuredRecess", @"StructuredRecess"),new InputOutputColumnPair(@"StructuredBreaks", @"StructuredBreaks")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Grade", @"Grade"),new InputOutputColumnPair(@"Age", @"Age"),new InputOutputColumnPair(@"GenderNumeric", @"GenderNumeric"),new InputOutputColumnPair(@"EthnicityNumeric", @"EthnicityNumeric"),new InputOutputColumnPair(@"EntryReasonNumeric", @"EntryReasonNumeric"),new InputOutputColumnPair(@"PriorIncidents", @"PriorIncidents"),new InputOutputColumnPair(@"OfficeReferrals", @"OfficeReferrals"),new InputOutputColumnPair(@"Suspensions", @"Suspensions"),new InputOutputColumnPair(@"Expulsions", @"Expulsions"),new InputOutputColumnPair(@"EntryAcademicLevelNumeric", @"EntryAcademicLevelNumeric"),new InputOutputColumnPair(@"SmallGroups", @"SmallGroups"),new InputOutputColumnPair(@"SocialWorkerVisits", @"SocialWorkerVisits"),new InputOutputColumnPair(@"PsychologistVisits", @"PsychologistVisits"),new InputOutputColumnPair(@"EntrySocialSkillsLevelNumeric", @"EntrySocialSkillsLevelNumeric"),new InputOutputColumnPair(@"RiskScore", @"RiskScore"),new InputOutputColumnPair(@"StudentStressLevelNormalized", @"StudentStressLevelNormalized"),new InputOutputColumnPair(@"FamilySupportNormalized", @"FamilySupportNormalized"),new InputOutputColumnPair(@"AcademicAbilityNormalized", @"AcademicAbilityNormalized"),new InputOutputColumnPair(@"EmotionalRegulationNormalized", @"EmotionalRegulationNormalized"),new InputOutputColumnPair(@"AvgVerbalAggression", @"AvgVerbalAggression"),new InputOutputColumnPair(@"AvgPhysicalAggression", @"AvgPhysicalAggression"),new InputOutputColumnPair(@"AvgAcademicEngagement", @"AvgAcademicEngagement"),new InputOutputColumnPair(@"AvgSocialInteractions", @"AvgSocialInteractions"),new InputOutputColumnPair(@"AvgEmotionalRegulation", @"AvgEmotionalRegulation"),new InputOutputColumnPair(@"AvgAggressionRisk", @"AvgAggressionRisk"),new InputOutputColumnPair(@"AvgEngagementLevel", @"AvgEngagementLevel"),new InputOutputColumnPair(@"RedZonePct", @"RedZonePct"),new InputOutputColumnPair(@"YellowZonePct", @"YellowZonePct"),new InputOutputColumnPair(@"BlueZonePct", @"BlueZonePct"),new InputOutputColumnPair(@"GreenZonePct", @"GreenZonePct"),new InputOutputColumnPair(@"BehaviorDays", @"BehaviorDays")}))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"SpecialEd",@"IEP",@"CheckInOut",@"StructuredRecess",@"StructuredBreaks",@"Grade",@"Age",@"GenderNumeric",@"EthnicityNumeric",@"EntryReasonNumeric",@"PriorIncidents",@"OfficeReferrals",@"Suspensions",@"Expulsions",@"EntryAcademicLevelNumeric",@"SmallGroups",@"SocialWorkerVisits",@"PsychologistVisits",@"EntrySocialSkillsLevelNumeric",@"RiskScore",@"StudentStressLevelNormalized",@"FamilySupportNormalized",@"AcademicAbilityNormalized",@"EmotionalRegulationNormalized",@"AvgVerbalAggression",@"AvgPhysicalAggression",@"AvgAcademicEngagement",@"AvgSocialInteractions",@"AvgEmotionalRegulation",@"AvgAggressionRisk",@"AvgEngagementLevel",@"RedZonePct",@"YellowZonePct",@"BlueZonePct",@"GreenZonePct",@"BehaviorDays"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"ExitReasonNumeric",inputColumnName:@"ExitReasonNumeric",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator: mlContext.BinaryClassification.Trainers.LbfgsLogisticRegression(new LbfgsLogisticRegressionBinaryTrainer.Options(){L1Regularization=1F,L2Regularization=1F,LabelColumnName=@"ExitReasonNumeric",FeatureColumnName=@"Features"}), labelColumnName:@"ExitReasonNumeric"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
