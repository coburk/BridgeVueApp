// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Diagnostics;


namespace BridgeVueApp.MachineLearning
{
    public partial class ML_Class_Success
    {
        /// <summary>
        /// model input class for ML_Class_Success.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(1)]
            [ColumnName(@"Grade")]
            public float Grade { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"Age")]
            public float Age { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"GenderNumeric")]
            public float GenderNumeric { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"EthnicityNumeric")]
            public float EthnicityNumeric { get; set; }

            [LoadColumn(5)]
            [ColumnName(@"SpecialEd")]
            public bool SpecialEd { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"IEP")]
            public bool IEP { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"EntryReasonNumeric")]
            public float EntryReasonNumeric { get; set; }

            [LoadColumn(8)]
            [ColumnName(@"PriorIncidents")]
            public float PriorIncidents { get; set; }

            [LoadColumn(9)]
            [ColumnName(@"OfficeReferrals")]
            public float OfficeReferrals { get; set; }

            [LoadColumn(10)]
            [ColumnName(@"Suspensions")]
            public float Suspensions { get; set; }

            [LoadColumn(11)]
            [ColumnName(@"Expulsions")]
            public float Expulsions { get; set; }

            [LoadColumn(12)]
            [ColumnName(@"EntryAcademicLevelNumeric")]
            public float EntryAcademicLevelNumeric { get; set; }

            [LoadColumn(13)]
            [ColumnName(@"CheckInOut")]
            public bool CheckInOut { get; set; }

            [LoadColumn(14)]
            [ColumnName(@"StructuredRecess")]
            public bool StructuredRecess { get; set; }

            [LoadColumn(15)]
            [ColumnName(@"StructuredBreaks")]
            public bool StructuredBreaks { get; set; }

            [LoadColumn(16)]
            [ColumnName(@"SmallGroups")]
            public float SmallGroups { get; set; }

            [LoadColumn(17)]
            [ColumnName(@"SocialWorkerVisits")]
            public float SocialWorkerVisits { get; set; }

            [LoadColumn(18)]
            [ColumnName(@"PsychologistVisits")]
            public float PsychologistVisits { get; set; }

            [LoadColumn(19)]
            [ColumnName(@"EntrySocialSkillsLevelNumeric")]
            public float EntrySocialSkillsLevelNumeric { get; set; }

            [LoadColumn(20)]
            [ColumnName(@"RiskScore")]
            public float RiskScore { get; set; }

            [LoadColumn(21)]
            [ColumnName(@"StudentStressLevelNormalized")]
            public float StudentStressLevelNormalized { get; set; }

            [LoadColumn(22)]
            [ColumnName(@"FamilySupportNormalized")]
            public float FamilySupportNormalized { get; set; }

            [LoadColumn(23)]
            [ColumnName(@"AcademicAbilityNormalized")]
            public float AcademicAbilityNormalized { get; set; }

            [LoadColumn(24)]
            [ColumnName(@"EmotionalRegulationNormalized")]
            public float EmotionalRegulationNormalized { get; set; }

            [LoadColumn(25)]
            [ColumnName(@"AvgVerbalAggression")]
            public float AvgVerbalAggression { get; set; }

            [LoadColumn(26)]
            [ColumnName(@"AvgPhysicalAggression")]
            public float AvgPhysicalAggression { get; set; }

            [LoadColumn(27)]
            [ColumnName(@"AvgAcademicEngagement")]
            public float AvgAcademicEngagement { get; set; }

            [LoadColumn(28)]
            [ColumnName(@"AvgSocialInteractions")]
            public float AvgSocialInteractions { get; set; }

            [LoadColumn(29)]
            [ColumnName(@"AvgEmotionalRegulation")]
            public float AvgEmotionalRegulation { get; set; }

            [LoadColumn(30)]
            [ColumnName(@"AvgAggressionRisk")]
            public float AvgAggressionRisk { get; set; }

            [LoadColumn(31)]
            [ColumnName(@"AvgEngagementLevel")]
            public float AvgEngagementLevel { get; set; }

            [LoadColumn(32)]
            [ColumnName(@"RedZonePct")]
            public float RedZonePct { get; set; }

            [LoadColumn(33)]
            [ColumnName(@"YellowZonePct")]
            public float YellowZonePct { get; set; }

            [LoadColumn(34)]
            [ColumnName(@"BlueZonePct")]
            public float BlueZonePct { get; set; }

            [LoadColumn(35)]
            [ColumnName(@"GreenZonePct")]
            public float GreenZonePct { get; set; }

            [LoadColumn(36)]
            [ColumnName(@"BehaviorDays")]
            public float BehaviorDays { get; set; }

            [LoadColumn(37)]
            [ColumnName(@"ExitReasonNumeric")]
            public float ExitReasonNumeric { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for ML_Class_Success.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"Grade")]
            public float Grade { get; set; }

            [ColumnName(@"Age")]
            public float Age { get; set; }

            [ColumnName(@"GenderNumeric")]
            public float GenderNumeric { get; set; }

            [ColumnName(@"EthnicityNumeric")]
            public float EthnicityNumeric { get; set; }

            [ColumnName(@"SpecialEd")]
            public float[] SpecialEd { get; set; }

            [ColumnName(@"IEP")]
            public float[] IEP { get; set; }

            [ColumnName(@"EntryReasonNumeric")]
            public float EntryReasonNumeric { get; set; }

            [ColumnName(@"PriorIncidents")]
            public float PriorIncidents { get; set; }

            [ColumnName(@"OfficeReferrals")]
            public float OfficeReferrals { get; set; }

            [ColumnName(@"Suspensions")]
            public float Suspensions { get; set; }

            [ColumnName(@"Expulsions")]
            public float Expulsions { get; set; }

            [ColumnName(@"EntryAcademicLevelNumeric")]
            public float EntryAcademicLevelNumeric { get; set; }

            [ColumnName(@"CheckInOut")]
            public float[] CheckInOut { get; set; }

            [ColumnName(@"StructuredRecess")]
            public float[] StructuredRecess { get; set; }

            [ColumnName(@"StructuredBreaks")]
            public float[] StructuredBreaks { get; set; }

            [ColumnName(@"SmallGroups")]
            public float SmallGroups { get; set; }

            [ColumnName(@"SocialWorkerVisits")]
            public float SocialWorkerVisits { get; set; }

            [ColumnName(@"PsychologistVisits")]
            public float PsychologistVisits { get; set; }

            [ColumnName(@"EntrySocialSkillsLevelNumeric")]
            public float EntrySocialSkillsLevelNumeric { get; set; }

            [ColumnName(@"RiskScore")]
            public float RiskScore { get; set; }

            [ColumnName(@"StudentStressLevelNormalized")]
            public float StudentStressLevelNormalized { get; set; }

            [ColumnName(@"FamilySupportNormalized")]
            public float FamilySupportNormalized { get; set; }

            [ColumnName(@"AcademicAbilityNormalized")]
            public float AcademicAbilityNormalized { get; set; }

            [ColumnName(@"EmotionalRegulationNormalized")]
            public float EmotionalRegulationNormalized { get; set; }

            [ColumnName(@"AvgVerbalAggression")]
            public float AvgVerbalAggression { get; set; }

            [ColumnName(@"AvgPhysicalAggression")]
            public float AvgPhysicalAggression { get; set; }

            [ColumnName(@"AvgAcademicEngagement")]
            public float AvgAcademicEngagement { get; set; }

            [ColumnName(@"AvgSocialInteractions")]
            public float AvgSocialInteractions { get; set; }

            [ColumnName(@"AvgEmotionalRegulation")]
            public float AvgEmotionalRegulation { get; set; }

            [ColumnName(@"AvgAggressionRisk")]
            public float AvgAggressionRisk { get; set; }

            [ColumnName(@"AvgEngagementLevel")]
            public float AvgEngagementLevel { get; set; }

            [ColumnName(@"RedZonePct")]
            public float RedZonePct { get; set; }

            [ColumnName(@"YellowZonePct")]
            public float YellowZonePct { get; set; }

            [ColumnName(@"BlueZonePct")]
            public float BlueZonePct { get; set; }

            [ColumnName(@"GreenZonePct")]
            public float GreenZonePct { get; set; }

            [ColumnName(@"BehaviorDays")]
            public float BehaviorDays { get; set; }

            [ColumnName(@"ExitReasonNumeric")]
            public uint ExitReasonNumeric { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public float PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string ResolveModelPath()
        {
            // optional override via env var if you ever need it
            var env = Environment.GetEnvironmentVariable("BV_MODEL_PATH");
            if (!string.IsNullOrWhiteSpace(env) && File.Exists(env))
                return env;

            var baseDir = AppContext.BaseDirectory;

            // common locations under the output folder
            string[] candidates =
            {
        Path.Combine(baseDir, "MachineLearning", "ML_Class_Success.mlnet"),
        Path.Combine(baseDir, "MachineLearning", "Models", "ML_Class_Success.mlnet"),
        Path.Combine(baseDir, "MachineLearning", "Models", "MLModel.mlnet"),
        Path.Combine(baseDir, "MachineLearning", "Models", "MLModel.zip"),
        Path.Combine(baseDir, "Models", "ML_Class_Success.mlnet"),
        Path.Combine(baseDir, "Models", "MLModel.mlnet"),
        Path.Combine(baseDir, "Models", "MLModel.zip"),
        Path.Combine(baseDir, "ML_Class_Success.mlnet"), // legacy
        Path.Combine(baseDir, "MLModel.zip")             // legacy
    };

            var hit = candidates.FirstOrDefault(File.Exists);
            if (hit != null) return hit;

            // last-chance: scan MachineLearning\Models if it exists
            var scan = Path.Combine(baseDir, "MachineLearning", "Models");
            if (Directory.Exists(scan))
            {
                var any = Directory.EnumerateFiles(scan, "*.*")
                                   .FirstOrDefault(p => p.EndsWith(".mlnet", StringComparison.OrdinalIgnoreCase)
                                                     || p.EndsWith(".zip", StringComparison.OrdinalIgnoreCase));
                if (any != null) return any;
            }

            // helpful diagnostics for you
            var msg = $"Model file not found. Looked under:\n" +
                      string.Join("\n", candidates) +
                      $"\nBaseDir: {baseDir}";
            Debug.WriteLine(msg);
            throw new FileNotFoundException(msg);
        }

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            var modelPath = ResolveModelPath();
            ITransformer mlModel = mlContext.Model.Load(modelPath, out _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }



        /// <summary>
        /// Use this method to predict scores for all possible labels.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static IOrderedEnumerable<KeyValuePair<string, float>> PredictAllLabels(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            var result = predEngine.Predict(input);
            return GetSortedScoresWithLabels(result);
        }

        /// <summary>
        /// Map the unlabeled result score array to the predicted label names.
        /// </summary>
        /// <param name="result">Prediction to get the labeled scores from.</param>
        /// <returns>Ordered list of label and score.</returns>
        /// <exception cref="Exception"></exception>
        public static IOrderedEnumerable<KeyValuePair<string, float>> GetSortedScoresWithLabels(ModelOutput result)
        {
            var unlabeledScores = result.Score;
            var labelNames = GetLabels(result);

            Dictionary<string, float> labledScores = new Dictionary<string, float>();
            for (int i = 0; i < labelNames.Count(); i++)
            {
                // Map the names to the predicted result score array
                var labelName = labelNames.ElementAt(i);
                labledScores.Add(labelName.ToString(), unlabeledScores[i]);
            }

            return labledScores.OrderByDescending(c => c.Value);
        }

        /// <summary>
        /// Get the ordered label names.
        /// </summary>
        /// <param name="result">Predicted result to get the labels from.</param>
        /// <returns>List of labels.</returns>
        /// <exception cref="Exception"></exception>
        private static IEnumerable<string> GetLabels(ModelOutput result)
        {
            var schema = PredictEngine.Value.OutputSchema;

            var labelColumn = schema.GetColumnOrNull("ExitReasonNumeric");
            if (labelColumn == null)
            {
                throw new Exception("ExitReasonNumeric column not found. Make sure the name searched for matches the name in the schema.");
            }

            // Key values contains an ordered array of the possible labels. This allows us to map the results to the correct label value.
            var keyNames = new VBuffer<float>();
            labelColumn.Value.GetKeyValues(ref keyNames);
            return keyNames.DenseValues().Select(x => x.ToString());
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
